(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{445:function(a,v,s){"use strict";s.r(v);var _=s(1),t=Object(_.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h3",{attrs:{id:"类的生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类的生命周期"}},[a._v("#")]),a._v(" 类的生命周期")]),a._v(" "),v("p",[a._v("类加载的过程包含了"),v("code",[a._v("加载")]),a._v("、"),v("code",[a._v("验证")]),a._v("、"),v("code",[a._v("准备")]),a._v("、"),v("code",[a._v("解析")]),a._v("、"),v("code",[a._v("初始化")]),a._v("，其中"),v("code",[a._v("加载")]),a._v("、"),v("code",[a._v("验证")]),a._v("、"),v("code",[a._v("准备")]),a._v("、"),v("code",[a._v("初始化")]),a._v("四个阶段的顺序是确定")]),a._v(" "),v("h4",{attrs:{id:"类的加载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类的加载"}},[a._v("#")]),a._v(" 类的加载")]),a._v(" "),v("ul",[v("li",[a._v("通过全限定类名来获取定义的二进制字节流")]),a._v(" "),v("li",[a._v("将这个字节流所代表的静态存储结构转换为方法区运行时数据结构")]),a._v(" "),v("li",[a._v("在java堆中生成一个代表这个类的Class对象，作为方法区这些数据的访问入口")])]),a._v(" "),v("p",[a._v("加载.class文件的方式：")]),a._v(" "),v("ul",[v("li",[a._v("本地加载")]),a._v(" "),v("li",[a._v("网络下载class文件")]),a._v(" "),v("li",[a._v("从zip、jar等归档文件中加载class文件")]),a._v(" "),v("li",[a._v("从专有数据库加载class文件")]),a._v(" "),v("li",[a._v("java源文件动态编译class文件")])]),a._v(" "),v("h4",{attrs:{id:"连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#连接"}},[a._v("#")]),a._v(" 连接")]),a._v(" "),v("ul",[v("li",[a._v("验证：确保被加载的类的正确性")]),a._v(" "),v("li",[a._v("准备: 为类的静态变量分配内存，并将其初始化为默认值")]),a._v(" "),v("li",[a._v("解析: 把类中的符号引用转换为直接引用")])]),a._v(" "),v("h4",{attrs:{id:"初始化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[a._v("#")]),a._v(" 初始化")]),a._v(" "),v("p",[a._v("初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化")]),a._v(" "),v("h3",{attrs:{id:"类的加载器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类的加载器"}},[a._v("#")]),a._v(" 类的加载器")]),a._v(" "),v("ul",[v("li",[a._v("启动类加载器：Bootstrap ClassLoader")]),a._v(" "),v("li",[a._v("扩展类加载器：Extension ClassLoader")]),a._v(" "),v("li",[a._v("应用程序类加载器：Application ClassLoader")])]),a._v(" "),v("h3",{attrs:{id:"jvm类加载机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm类加载机制"}},[a._v("#")]),a._v(" JVM类加载机制")]),a._v(" "),v("ul",[v("li",[a._v("全盘负责")]),a._v(" "),v("li",[a._v("父类委托")]),a._v(" "),v("li",[a._v("缓存机制")]),a._v(" "),v("li",[a._v("双亲委派机制：Application ClassLoader将请求委派给Extension ClassLoader，Extension ClassLoader将请求委派给Bootstrap ClassLoader；实际都需要从Bootstrap ClassLoader加载，没找到，再有Extension ClassLoader加载，最后由Application ClassLoader加载")])])])}),[],!1,null,null,null);v.default=t.exports}}]);