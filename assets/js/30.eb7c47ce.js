(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{444:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"io分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#io分类"}},[t._v("#")]),t._v(" IO分类")]),t._v(" "),s("ul",[s("li",[t._v("字节流：机器看的")]),t._v(" "),s("li",[t._v("字符流：人看的")])]),t._v(" "),s("h4",{attrs:{id:"字节流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字节流"}},[t._v("#")]),t._v(" 字节流")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/fighting-Yrj/blog-img/main/java-io-category-1.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"字符流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符流"}},[t._v("#")]),t._v(" 字符流")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/fighting-Yrj/blog-img/main/java-io-category-2.png",alt:""}})]),t._v(" "),s("p",[t._v("字节流可以用来处理图片、MP3、视频文件等；字符流可以用来处理文本文件。")]),t._v(" "),s("h3",{attrs:{id:"unix-io模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unix-io模型"}},[t._v("#")]),t._v(" Unix IO模型")]),t._v(" "),s("h4",{attrs:{id:"阻塞式io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻塞式io"}},[t._v("#")]),t._v(" 阻塞式IO")]),t._v(" "),s("h4",{attrs:{id:"非阻塞式io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞式io"}},[t._v("#")]),t._v(" 非阻塞式IO")]),t._v(" "),s("p",[t._v("应用进行IO操作，进程会继续执行，但是需要不断的轮询查看IO操作是否成功，所以比较低效")]),t._v(" "),s("h4",{attrs:{id:"i-o复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o复用"}},[t._v("#")]),t._v(" I/O复用")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/fighting-Yrj/blog-img/main/java-io-model-2.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"信号驱动i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#信号驱动i-o"}},[t._v("#")]),t._v(" 信号驱动I/O")]),t._v(" "),s("p",[t._v("内核在数据到达时向应用进程发送 SIGIO 信号，应用进程收到之后在信号处理程序中调用 recvfrom 将数据从内核复制到应用进程中")]),t._v(" "),s("p",[t._v("相比于非阻塞式 I/O 的轮询方式，信号驱动 I/O 的 CPU 利用率更高")]),t._v(" "),s("h4",{attrs:{id:"异步i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步i-o"}},[t._v("#")]),t._v(" 异步I/O")]),t._v(" "),s("p",[t._v("异步 I/O 与信号驱动 I/O 的区别在于，异步 I/O 的信号是通知应用进程 I/O 完成，而信号驱动 I/O 的信号是通知应用进程可以开始 I/O")]),t._v(" "),s("h3",{attrs:{id:"nio详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nio详解"}},[t._v("#")]),t._v(" NIO详解")]),t._v(" "),s("h4",{attrs:{id:"通道与缓冲区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通道与缓冲区"}},[t._v("#")]),t._v(" 通道与缓冲区")]),t._v(" "),s("p",[t._v("通道包括以下类型：")]),t._v(" "),s("ul",[s("li",[t._v("FileChannel：从文件中读写")]),t._v(" "),s("li",[t._v("DatagramChannel：通过UDP读写网络中的数据")]),t._v(" "),s("li",[t._v("SocketChannel：通过TCP读写网络中的数据")]),t._v(" "),s("li",[t._v("ServerSocketChannel： 可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel")])]),t._v(" "),s("h4",{attrs:{id:"缓冲区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓冲区"}},[t._v("#")]),t._v(" 缓冲区")]),t._v(" "),s("p",[t._v("缓冲区包括以下类型：")]),t._v(" "),s("ul",[s("li",[t._v("ByteBuffer")]),t._v(" "),s("li",[t._v("CharBuffer")]),t._v(" "),s("li",[t._v("ShortBuffer")]),t._v(" "),s("li",[t._v("InteBuffer")]),t._v(" "),s("li",[t._v("LongBuffer")]),t._v(" "),s("li",[t._v("FloatBuffer")]),t._v(" "),s("li",[t._v("DoubleBuffer")])]),t._v(" "),s("p",[t._v("NIO快速复制文件的实例：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fastCopy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" src"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" dist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 获得源文件的输入字节流 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),t._v(" fin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 获取输入字节流的文件通道 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileChannel")]),t._v(" fcin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getChannel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 获取目标文件的输出字节流 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileOutputStream")]),t._v(" fout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileOutputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 获取输出字节流的通道 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileChannel")]),t._v(" fcout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getChannel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 为缓冲区分配 1024 个字节 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuffer")]),t._v(" buffer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("allocateDirect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   \n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 从输入通道中读取数据到缓冲区中 */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fcin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* read() 返回 -1 表示 EOF */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 切换读写 */")]),t._v("\n        buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flip")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 把缓冲区的内容写入输出文件中 */")]),t._v("\n        fcout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 清空缓冲区 */")]),t._v("\n        buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br")])]),s("h4",{attrs:{id:"i-o多路复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o多路复用"}},[t._v("#")]),t._v(" I/O多路复用")]),t._v(" "),s("p",[t._v("主要包括四种：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("IO模型")]),t._v(" "),s("th",[t._v("相对性能")]),t._v(" "),s("th",[t._v("关键思路")]),t._v(" "),s("th",[t._v("操作系统")]),t._v(" "),s("th",[t._v("JAVA支持情况")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("select")]),t._v(" "),s("td",[t._v("较高")]),t._v(" "),s("td",[t._v("Reactor")]),t._v(" "),s("td",[t._v("Windows/Linux")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("poll")]),t._v(" "),s("td",[t._v("较高")]),t._v(" "),s("td",[t._v("Reactor")]),t._v(" "),s("td",[t._v("Linux")]),t._v(" "),s("td",[t._v("Linux kernels 2.6内核版本之前使用poll进行支持")])]),t._v(" "),s("tr",[s("td",[t._v("epoll")]),t._v(" "),s("td",[t._v("高")]),t._v(" "),s("td",[t._v("Reactor/Proactor")]),t._v(" "),s("td",[t._v("Linux")]),t._v(" "),s("td",[t._v("Linux kernels 2.6内核版本及以后使用epoll进行支持")])]),t._v(" "),s("tr",[s("td",[t._v("kqueue")]),t._v(" "),s("td",[t._v("高")]),t._v(" "),s("td",[t._v("Proactor")]),t._v(" "),s("td",[t._v("Linux")]),t._v(" "),s("td",[t._v("目前JAVA的版本不支持")])])])]),t._v(" "),s("h4",{attrs:{id:"reactor事件驱动模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reactor事件驱动模型"}},[t._v("#")]),t._v(" Reactor事件驱动模型")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/fighting-Yrj/blog-img/main/java-io-reactor-2.png",alt:""}})]),t._v(" "),s("p",[t._v("从图中可以看出，在Reactor模型中，主要有四个角色："),s("strong",[t._v("客户端连接，Reactor，Acceptor和Handler")]),t._v("。这里Acceptor会不断地接收客户端的连接，然后将接收到的连接交由Reactor进行分发，最后有具体的Handler进行处理")]),t._v(" "),s("h4",{attrs:{id:"nio零拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nio零拷贝"}},[t._v("#")]),t._v(" NIO零拷贝")]),t._v(" "),s("p",[t._v("减少拷贝思路：")]),t._v(" "),s("ol",[s("li",[t._v("减少上下文切换次数")]),t._v(" "),s("li",[t._v("减少拷贝次数")])]),t._v(" "),s("p",[t._v("实现零拷贝的2中方法：")]),t._v(" "),s("ul",[s("li",[t._v("mmap + write\n"),s("ul",[s("li",[t._v("创建一个内核和用户空间共享的映射缓冲区")]),t._v(" "),s("li",[t._v("用户可以直接操作共享映射缓冲区的内容 ---\x3e减少将内容拷贝到用户空间的操作")]),t._v(" "),s("li",[t._v("写入网卡的时候调用write可以直接将内容从映射缓冲区拷贝一份到Socket缓冲区---\x3e减少将内容从内核拷贝到用户空间的操作")]),t._v(" "),s("li")])]),t._v(" "),s("li",[t._v("sendfile\n"),s("ul",[s("li",[t._v("调用sendfile方法时从用户态切到内核态")]),t._v(" "),s("li",[t._v("传输成功之后再从内核态传入到用户态，减少了两次上下文的切换")])])])]),t._v(" "),s("p",[t._v("真正的零拷贝应该是不需要CPU进行搬运工作。所以sendfile方法在调用的时候如果⽹卡⽀持 scatter-gather 特性那么可以将内容直接从内核缓存区拷贝到网卡。这样就不需要cpu的搬运实现了真正的零拷贝")]),t._v(" "),s("p",[t._v("NIO的零拷贝调用了transferTo()方法，底层实现基于sendfile实现零拷贝")])])}),[],!1,null,null,null);s.default=e.exports}}]);